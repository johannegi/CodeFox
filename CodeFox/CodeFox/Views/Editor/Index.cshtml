@model CodeFox.Models.ViewModels.EditorViewModel
@{
    ViewBag.Title = "Index";
}
@Styles.Render("~/Content/JsTree/style.min.css")

<h1 id="ProjectName">Project name: @Html.DisplayFor(model => model.Name)</h1>
<div class="EditorButtons">
    <!-- Class created to construct the look of the buttons on EditorPage -->
    <!-- Nav bar where SAVE EXPORT SHARE ADD FILE CLOSE AND DELETE PROJECT WILL BE-->
    @Html.ActionLink("Export", "Share", "Editor", new { @class = "btn btn-info" })
    @Html.ActionLink("Share with your foxes!", "Share", "Editor", new { id = Model.ID }, new { @class = "btn btn-info" })
    @Html.ActionLink("Add files", "AddFiles", "Editor", new { id = Model.ID },  new { @class = "btn btn-info" })
    @Html.ActionLink("Close", "Index", "Projects", new { area = "" }, new { @class = "btn btn-info" })
</div>
@if (User.Identity.Name == Model.Owner.Username)
{
    <div class="EditorButtons"> @Html.ActionLink("Delete project", "Delete", "Projects", new { id = Model.ID }, new { @class = "btn btn-danger DeleteButton" })</div>
}

<div class="EditorArea">   

    <div>
        <!-- Nav bar where SAVE EXPORT SHARE ADD FILE CLOSE AND DELETE PROJECT WILL BE-->
    </div>
    <div class="container">
        <!-- DIV AROUND THE FILE TREE VIEW AND EDITOR-->
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">FileName <p id="EditorInfo">Project info</p></h3>
            </div>
            <div id="tree" class="col-lg-2"></div>
            <div class="panel-body">
             
                <pre id="Editor">@Model.CurrentOpenFile.Location</pre>
            </div>
        </div>
        <div class="text-center">---Possibly add who shared with, or when last change was made---</div>
    </div>
    @section scripts{
    <script src="@Url.Content("~/Scripts/AceEditor/ace.js")" type="text/javascript" charset="utf-8"> </script>
    <script src="@Url.Content("~/Scripts/AceEditor/ext-modelist.js")" type="text/javascript" charset="utf-8"></script>
    <script>
                var Editor = ace.edit("Editor");
                Editor.setTheme("ace/theme/twilight");
                Editor.session.setMode("ace/mode/Text");
                Editor.$blockScrolling = Infinity;

                var typingTimer;                //timer identifier
                var doneTypingInterval = 500;  //time in ms, 5 second for example

                //on keyup, start the countdown
                $('#Editor').on("keyup", function () {
                    if (typingTimer) clearTimeout(typingTimer);                 // Clear if already set     
                    typingTimer = setTimeout(doneTyping, doneTypingInterval);
                });

                //on keydown, clear the countdown 
                $('#Editor').on("keydown", function () {
                    clearTimeout(typingTimer);
                    var Selected = $('#tree').jstree(true).get_selected('full', true)
                    Selected = Selected[0]
                    if (Selected.type == 'file')
                    {
                        $('#EditorInfo').text('File will save when you stop editing');
                    } 
                });

                //user is "finished typing," do something
                function doneTyping()
                {
                    var Selected = $('#tree').jstree(true).get_selected('full', true)
                    Selected = Selected[0]
                    if (Selected.type == 'file')
                    {
                        $.ajax({
                            url: '/Editor/SaveFile/',
                            data: { 'ProjectID': Number(@Model.ID), 'FileID': Number(Selected.id), 'NewText': ace.edit("Editor").getValue() },
                            method: 'POST',
                            success: function (ReturnData) {
                                $('#EditorInfo').text('FileSaved');
                            }
                        });
                    } 
                }
    </script>
    <script src="@Url.Content("~/Scripts/JsTree/jstree.min.js")" type="text/javascript"></script>
    <script>
        $('#tree').jstree({
            "core": {
                "animation": 0,
                "check_callback": true,
                "data": [
                { "id": "1", "parent": "#", "text": "@Model.Name" },
                { "id": "@Model.ReadMe.ID", "parent": "1", "text": "@Model.ReadMe.Name.@Model.ReadMe.Type", "type": "file" },
                @foreach (var Item in Model.Files)
                {
                    <text>
                        { "id": "@Item.ID", "parent": "1", "text": "@Item.Name.@Item.Type", "type": "file" },
                    </text>
                }
                ]
            },
            "types": {
                "#": {
                    //"max_children": 1,
                    //"max_depth": 4,
                    "valid_children": ["root"]
                },
                /*"root": {
                    "icon": "/static/3.1.1/assets/images/tree_icon.png",
                    "valid_children": ["default"]
                },*/
                "default": {
                    "valid_children": ["default", "file"]
                },
                "file": {
                    "icon": "glyphicon glyphicon-file",
                    "valid_children": []
                }
            },
            "plugins": ["contextmenu", "dnd", "types"],
            "contextmenu": {
                "items": function ($node) {
                    return {
                        "Rename": {
                            "separator_before": false,
                            "separator_after": false,
                            "label": "Rename",
                            "action": function (obj) {
                                var NewName = prompt("Please enter new filename", "");
                                if (NewName != null || NewName != "")
                                {
                                    $("#tree").jstree('set_text', $node, (NewName));
                                }
                            }
                        },
                        "Remove": {
                            "separator_before": false,
                            "separator_after": false,
                            "label": "Remove",
                            "action": function (obj) {
                                if (confirm("Are you sure you want to delete " + $node.text) == true)
                                {
                                    if ($node.type == 'file')
                                    {
                                        $.ajax({
                                            url: '/Editor/DeleteFile/',
                                            data: {'FileID': Number($node.id) },
                                            method: 'POST',
                                            success: function (ReturnData) {
                                                $('#EditorInfo').text($node.text + ' deleted');
                                                $("#tree").jstree('delete_node', $node);
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    };
                }
            }

        });

        var Parent = 0;
        var newParent = 0;
        var Pos = 0;
        var newPos = 0;


        $("#tree").on("loaded.jstree", function () {
            
            $('#tree').jstree(true).select_node('@Model.ReadMe.ID');
            var PrevSelected = $('#tree').jstree(true).get_selected('full', true)
            $("#tree").on("select_node.jstree", function (event, node) {
                var Selected = $('#tree').jstree(true).get_selected('full', true)
                Selected = Selected[0]
                if (PrevSelected.type == 'file' || PrevSelected != null)
                {
                    $.ajax({
                        url: '/Editor/SaveFile/',
                        data: { 'FileID': Number(PrevSelected), 'NewText': ace.edit("Editor").getValue() },
                        method: 'POST',
                        success: function (ReturnData) {}
                    });
                }
                PrevSelected = Selected;
                if (Selected.type == 'file')
                {
                    ace.edit("Editor").setReadOnly(false);
                    $.ajax({
                        url: '/Editor/OpenNewFile/',
                        data: { 'FileID': Number(Selected.id) },
                        method: 'POST',
                        success: function (ReturnData) {
                            var test = ReturnData.Location;
                            ace.edit("Editor").setValue(ReturnData.Location);
                            var modelist = ace.require("ace/ext/modelist")
                            var filePath = ReturnData.Name + '.' + ReturnData.Type;                         
                            var mode = modelist.getModeForPath(filePath).mode;
                            ace.edit("Editor").session.setMode(mode);
                        }
                    });
                }
                else
                {
                    ace.edit("Editor").setValue('');
                    ace.edit("Editor").setReadOnly(true);
                }
                
            });
        });

        $(document).on('dnd_start.vakata', function (event, data) {
            sel = "li#" + data.data.nodes[0] + ".jstree-node";
            Parent = $('#tree').jstree(true).get_node(data.data.nodes[0]).parent;
            Pos = $(sel).index();
        });

        $(document).on('dnd_stop.vakata', function (event, data) {
            node = data.data.origin.get_node(data.data.nodes[0]);
            if (node.type == "root") {
                return false;
            }
            $('#tree').jstree(true).move_node(node, Parent, Pos);

            sel = "li#" + data.data.nodes[0] + ".jstree-node";
            newPos = $(sel).index();
            newParent = node.parent;
        });
    </script>
        
    }
</div>

